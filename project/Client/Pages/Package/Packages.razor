@page "/Packages"
@inject NavigationManager NavigationManager
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<h3>Packages</h3>

<a href="/flights/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Flights
</a>
<br />
<br />

<EditForm Model="@PBooking" OnValidSubmit="CreateBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Destination: </label>
        <div>
            <InputSelect @bind-Value="PBooking.PackageId" class="form-control">
                <option value="">-- Select GoingToId --</option>
                @if (packages != null)
                {
                    foreach (var PackageN in packages)
                    {
                        <option value="@PackageN.Id">@PackageN.PackageName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => PBooking.PackageId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Amount of Passenger: </label>
        <div>
            <InputNumber @bind-Value="@PBooking.Address" class="form-control" />
            <ValidationMessage For="@(() => PBooking.Address)" />
        </div>
    </div>
    <div class="form-group">
        <label>Date: </label>
        <div>
            <InputDate @bind-Value="@PBooking.Destination" class="form-control" />
            <ValidationMessage For="@(() => PBooking.Destination)" />
        </div>
    </div>
    <div class="form-group">
        <label>Time: </label>
        <div>
            <InputDate @bind-Value="@PBooking.Amount" class="form-control" />
            <ValidationMessage For="@(() => PBooking.Amount)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Book
    </button>
</EditForm>


@if (package == null)
{
    <div class="alert alert-info">Loading Flights...</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>PackageName</th>
                <th>PackageCapacity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var packages in package)
            {
                <tr>
                    <td>@packages.PackageName</td>
                    <td>@packages.PackageCapacity</td>
                    <td>@packages.Price</td>

                    <td>
                        <a href="/flights/view/@packages.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                    </td>
                    <td>
                        <a href="/flights/edit/@packages.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(packages.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>}
@code {
    private List<Package> package;

    protected async override Task OnInitializedAsync()
    {

        package = await _client.GetFromJsonAsync<List<Package>>($"{Endpoints.PackagesEndpoint}");
        packages = await _client.GetFromJsonAsync<List<Package>>($"{Endpoints.PackagesEndpoint}");
    }

    PackageBooking PBooking = new PackageBooking();

    private IList<Package> packages;

    private async Task CreateBooking()
    {
        await _client.PostAsJsonAsync(Endpoints.FlightBookingEndpoint, PBooking);
        NavigationManager.NavigateTo("/PackagesBooking");

    }
    async Task Delete(int packagesId)
    {
        var packages = package.First(q => q.Id == packagesId);
        var confirms = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {packages.Id}? ");
        if (confirms)
        {
            await _client.DeleteAsync($"{Endpoints.PackagesEndpoint}/{packagesId}");
            await OnInitializedAsync();
        }
    }


}

