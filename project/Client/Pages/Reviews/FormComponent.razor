@inject HttpClient _client

<EditForm Model="@review" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@review.Name" class="form-control" />
                <ValidationMessage For="@(() => review.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Profile Pic: </label>
            <div>
                <InputText @bind-Value="@review.ProfilePic" class="form-control" />
                <ValidationMessage For="@(() => review.ProfilePic)" />
            </div>
        </div>

        <div class="form-group">
            <label>reviews: </label>
            <div>
                <InputText @bind-Value="@review.reviews" class="form-control" />
                <ValidationMessage For="@(() => review.reviews)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <project.Client.Components.BackToList Target="Review" />


</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Reviews review { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Reviews> reviews;

    protected async override Task OnInitializedAsync()
    {
        reviews = await _client.GetFromJsonAsync<List<Reviews>>($"{Endpoints.ReviewsEndpoint}");
    }
}
