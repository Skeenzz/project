@page "/FlightsBooking"
@inject NavigationManager NavigationManager
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3>Your Bookings</h3>


<button class="btn btn-secondary" @onclick="@BackFlights">
    <span class="oi oi-plus"></span>
    Create New Flights Booking
</button>
<br />
<br />


<p>Flight Booking</p>


@if (fBooking == null)
{
    <div class="alert alert-info">Loading Flights...</div>
}

else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Departure</th>
                <th>Destination</th>
                <th>Passenger</th>
                <th>Price</th>
                <th>Time</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flightBookings in fBooking)
            {
                <tr>
                    <td>Singapore</td>
                    <td>@flightBookings.Flights.GoingTo</td>
                    <td>@flightBookings.Passenger</td>
                    <td>@flightBookings.Flights.Price</td>
                    <td>@flightBookings.Departing.ToString("dd MMMM yyyy")</td>
                    <td>@flightBookings.Returning.ToString("dd MMMM yyyy")</td>



                    <td>
                        <a href="/flightsbooking/edit/@flightBookings.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(flightBookings.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<FlightBooking> fBooking;

    protected async override Task OnInitializedAsync()

    {
        fBooking = await _client.GetFromJsonAsync<List<FlightBooking>>($"{Endpoints.FlightBookingEndpoint}");
    }

    async Task Delete(int flightBookingId)
    {
        var flightBookings = fBooking.First(q => q.Id == flightBookingId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {flightBookings.Id}? ");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.FlightBookingEndpoint}/{flightBookingId}");
            await OnInitializedAsync();
        }
    }

    void BackFlights(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("Flight");
    }

}
